const { Client } = require('@notionhq/client');

// Configuration
const NOTION_TOKEN = process.env.NOTION_TOKEN;
const DATABASE_ID = process.env.NOTION_DATABASE_ID;

if (!NOTION_TOKEN || !DATABASE_ID) {
  console.error('‚ùå Variables d\'environnement manquantes:');
  console.error('   NOTION_TOKEN:', NOTION_TOKEN ? '‚úÖ Configur√©' : '‚ùå Manquant');
  console.error('   NOTION_DATABASE_ID:', DATABASE_ID ? '‚úÖ Configur√©' : '‚ùå Manquant');
  console.log('\nüí° Pour configurer:');
  console.log('   export NOTION_TOKEN="secret_..."');
  console.log('   export NOTION_DATABASE_ID="..."');
  process.exit(1);
}

const notion = new Client({ auth: NOTION_TOKEN });

async function testNotionConnection() {
  try {
    console.log('üîÑ Test de connexion √† Notion...');
    
    // Test 1: V√©rifier l'acc√®s √† la base
    console.log('\nüìã Test d\'acc√®s √† la base de donn√©es...');
    const database = await notion.databases.retrieve({
      database_id: DATABASE_ID
    });
    
    console.log('‚úÖ Base de donn√©es trouv√©e:', database.title[0]?.plain_text || 'Sans titre');
    
    // Test 2: Lister les propri√©t√©s
    console.log('\nüè∑Ô∏è Propri√©t√©s de la base:');
    Object.entries(database.properties).forEach(([name, prop]) => {
      console.log(`   - ${name}: ${prop.type}`);
    });
    
    // Test 3: R√©cup√©rer quelques articles
    console.log('\nüìÑ Test de r√©cup√©ration des articles...');
    const response = await notion.databases.query({
      database_id: DATABASE_ID,
      page_size: 3
    });
    
    console.log(`‚úÖ ${response.results.length} articles trouv√©s`);
    
    // Afficher les d√©tails des articles
    response.results.forEach((page, index) => {
      const props = page.properties;
      const title = props.Titre?.title?.[0]?.plain_text || 'Sans titre';
      const status = props.Status?.select?.name || 'Pas de status';
      
      console.log(`   ${index + 1}. "${title}" - Status: ${status}`);
    });
    
    // Test 4: V√©rifier les propri√©t√©s requises
    console.log('\nüîç V√©rification des propri√©t√©s requises...');
    const requiredProps = ['Titre', 'Slug', 'Status', 'Date de publication', 'Extrait'];
    const missingProps = requiredProps.filter(prop => !database.properties[prop]);
    
    if (missingProps.length > 0) {
      console.log('‚ö†Ô∏è Propri√©t√©s manquantes:', missingProps.join(', '));
      console.log('üí° Veuillez ajouter ces colonnes dans votre base Notion');
    } else {
      console.log('‚úÖ Toutes les propri√©t√©s requises sont pr√©sentes');
    }
    
    console.log('\nüéâ Test de connexion r√©ussi!');
    console.log('\nüöÄ Prochaines √©tapes:');
    console.log('   1. Ajouter les secrets dans GitHub: Settings ‚Üí Secrets and variables ‚Üí Actions');
    console.log('   2. Tester la synchronisation: npm run sync-notion');
    console.log('   3. D√©clencher depuis Notion avec un webhook ou manuellement');
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors du test:', error.message);
    
    if (error.code === 'unauthorized') {
      console.log('\nüí° Solutions possibles:');
      console.log('   - V√©rifiez que le token Notion est correct');
      console.log('   - Assurez-vous que l\'int√©gration a acc√®s √† la base');
      console.log('   - Partagez la base avec votre int√©gration Notion');
    } else if (error.code === 'object_not_found') {
      console.log('\nüí° Solutions possibles:');
      console.log('   - V√©rifiez que l\'ID de la base est correct');
      console.log('   - Assurez-vous que la base existe et est accessible');
    }
    
    process.exit(1);
  }
}

testNotionConnection();